using System.Runtime.CompilerServices;
using Vectra.Bytecode;

[assembly: InternalsVisibleTo("Vectra.Compiler.Tests")]

namespace Vectra.Compiler;

public static class Compiler
{
    // TODO: Handle failures gracefully
    /// Compiles the provided source code file into bytecode.
    /// This method reads the source code from a specified file path, tokenizes the source code,
    /// parses it into an abstract syntax tree (AST), and then converts the AST into bytecode using
    /// a bytecode generator. The generated bytecode is written to a file.
    /// This method assumes that the source code file is present at the specified location
    /// and that it is valid. If the file does not exist, the method logs an error and exits without
    /// performing the compilation.
    /// <param name="sourcePath">
    /// The file path of the source code to be compiled. The path must point to an existing file.
    /// </param>
    public static void Compile(string sourcePath)
    {
        if (!File.Exists(sourcePath))
        {
            Console.Error.WriteLine($"File '{sourcePath}' does not exist.");
            return;
        }
        // TODO: Multiple file support
        var sourceCode = File.ReadAllText(sourcePath);
        var lexer = new Lexer.Lexer(sourceCode);
        var tokens = lexer.Tokenize();

        var parser = new Parser(tokens);
        var module = parser.Parse();

        var bytecodeGenerator = new BytecodeGenerator();
        var program = bytecodeGenerator.Generate(module);
        // TODO: Support for custom output locations
        BytecodeWriter.WriteToFile(program);
    }
}